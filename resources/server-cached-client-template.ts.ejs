<%
function getCamelCasedEntitiesName() {
  return utils.pluralize(utils.toCamelCase(entity.name));
}
-%>
<% if (entity.api.booleans.hasAny) { -%>
// library imports
import { unstable_cache } from 'next/cache';

// airent imports
import { NextCacheOptions, withDecoded, respond } from '<%- config.apiNext.serverClientLibPackage %>';

// config imports
import { Context } from '<%- config.apiNext.serverClientContextPackage %>';

// entity imports
import {
  <%= entity.strings.fieldRequestClass %>,
  <%_ if (entity.api.booleans.hasSearch || entity.api.booleans.hasGetMany) { -%>
  <%= entity.api.strings.manyResponse %>,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOneRequest || entity.api.booleans.hasCreateOne) { -%>
  <%= entity.api.strings.oneResponse %>,
  <%_ } -%>
} from '<%- entity.apiNext.packages.serverClientType %>';
import <%= entity.api.strings.dispatcherClass %> from '<%- entity.apiNext.packages.serverClientDispatcher %>';
import {
  <%_ if (entity.api.booleans.hasSearch) { -%>
  <%= entity.api.strings.searchQuery %>,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetMany) { -%>
  <%= entity.api.strings.getManyQuery %>,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOneRequest) { -%>
  <%= entity.api.strings.getOneParams %>,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasCreateOne) { -%>
  <%= entity.api.strings.createOneBody %>,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasUpdateOne) { -%>
  <%= entity.api.strings.updateOneBody %>,
  <%_ } -%>
} from '<%- entity.apiNext.packages.serverClientRequest %>';
  <%_ if (entity.api.booleans.hasSearch) { -%>

async function search<S extends <%= entity.strings.fieldRequestClass %>>(
  query: <%= entity.api.strings.searchQuery %>,
  fieldRequest: S,
  context: Context,
  options?: NextCacheOptions
): Promise<<%= entity.api.strings.manyResponse %><S>> {
  const data = { query: withDecoded(query), fieldRequest };
  const cacheKey = [
    '<%= utils.pluralize(utils.toCamelCase(entity.name)) %>',
    'search',
    JSON.stringify(data),
    JSON.stringify(context),
  ];
  const callback = () => <%= entity.api.strings.dispatcherClass %>.search(data, context).then(respond);
  return await unstable_cache(callback, cacheKey, options)();
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetMany) { -%>

async function getMany<S extends <%= entity.strings.fieldRequestClass %>>(
  query: <%= entity.api.strings.getManyQuery %>,
  fieldRequest: S,
  context: Context,
  options?: NextCacheOptions
): Promise<<%= entity.api.strings.manyResponse %><S>> {
  const data = { query: withDecoded(query), fieldRequest };
  const cacheKey = [
    '<%= getCamelCasedEntitiesName() %>',
    'getMany',
    JSON.stringify(data),
    JSON.stringify(context),
  ];
  const callback = () => <%= entity.api.strings.dispatcherClass %>.getMany(data, context).then(respond);
  return await unstable_cache(callback, cacheKey, options)();
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOne) { -%>

async function getOne<S extends <%= entity.strings.fieldRequestClass %>>(
  params: <%= entity.api.strings.getOneParams %>,
  fieldRequest: S,
  context: Context,
  options?: NextCacheOptions
): Promise<<%= entity.api.strings.oneResponse %><S>> {
  const data = { params: withDecoded(params), fieldRequest };
  const cacheKey = [
    '<%= getCamelCasedEntitiesName() %>',
    'getOne',
    JSON.stringify(data),
    JSON.stringify(context),
  ];
  const callback = () => <%= entity.api.strings.dispatcherClass %>.getOne(data, context).then(respond);
  return await unstable_cache(callback, cacheKey, options)();
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOneSafe) { -%>

async function getOneSafe<S extends <%= entity.strings.fieldRequestClass %>>(
  params: <%= entity.api.strings.getOneParams %>,
  fieldRequest: S,
  context: Context,
  options?: NextCacheOptions
): Promise<<%= entity.api.strings.oneResponse %><S, true>> {
  const data = { params: withDecoded(params), fieldRequest };
  const cacheKey = [
    '<%= getCamelCasedEntitiesName() %>',
    'getOneSafe',
    JSON.stringify(data),
    JSON.stringify(context),
  ];
  const callback = () => <%= entity.api.strings.dispatcherClass %>.getOneSafe(data, context).then(respond);
  return await unstable_cache(callback, cacheKey, options)();
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasCreateOne) { -%>

async function createOne<S extends <%= entity.strings.fieldRequestClass %>>(
  body: <%= entity.api.strings.createOneBody %>,
  fieldRequest: S,
  context: Context,
  options?: NextCacheOptions
): Promise<<%= entity.api.strings.oneResponse %><S>> {
  const data = { body, fieldRequest };
  const cacheKey = [
    '<%= getCamelCasedEntitiesName() %>',
    'createOne',
    JSON.stringify(data),
    JSON.stringify(context),
  ];
  const callback = () => <%= entity.api.strings.dispatcherClass %>.createOne(data, context).then(respond);
  return await unstable_cache(callback, cacheKey, options)();
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasUpdateOne) { -%>

async function updateOne<S extends <%= entity.strings.fieldRequestClass %>>(
  params: <%= entity.api.strings.getOneParams %>,
  body: <%= entity.api.strings.updateOneBody %>,
  fieldRequest: S,
  context: Context,
  options?: NextCacheOptions
): Promise<<%= entity.api.strings.oneResponse %><S>> {
  const data = { params: withDecoded(params), body, fieldRequest };
  const cacheKey = [
    '<%= getCamelCasedEntitiesName() %>',
    'updateOne',
    JSON.stringify(data),
    JSON.stringify(context),
  ];
  const callback = () => <%= entity.api.strings.dispatcherClass %>.updateOne(data, context).then(respond);
  return await unstable_cache(callback, cacheKey, options)();
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasDeleteOne) { -%>

async function deleteOne<S extends <%= entity.strings.fieldRequestClass %>>(
  params: <%= entity.api.strings.getOneParams %>,
  fieldRequest: S,
  context: Context,
  options?: NextCacheOptions
): Promise<<%= entity.api.strings.oneResponse %><S>> {
  const data = { params: withDecoded(params), fieldRequest };
  const cacheKey = [
    '<%= getCamelCasedEntitiesName() %>',
    'deleteOne',
    JSON.stringify(data),
    JSON.stringify(context),
  ];
  const callback = () => <%= entity.api.strings.dispatcherClass %>.deleteOne(data, context).then(respond);
  return await unstable_cache(callback, cacheKey, options)();
}
  <%_ } -%>

  <%_ if (entity.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
const <%= `${utils.toTitleCase(entity.name)}CachedServerApiClient` %> = {
  <%_ if (entity.api.booleans.hasSearch) { -%>
  search,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetMany) { -%>
  getMany,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOne) { -%>
  getOne,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOneSafe) { -%>
  getOneSafe,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasCreateOne) { -%>
  createOne,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasUpdateOne) { -%>
  updateOne,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasDeleteOne) { -%>
  deleteOne,
  <%_ } -%>
};

export default <%= `${utils.toTitleCase(entity.name)}CachedServerApiClient` %>;
<% } -%>
